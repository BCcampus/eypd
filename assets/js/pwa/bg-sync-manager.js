(function(){async function a(a){const b='POST'===a.method?await a.arrayBuffer():null;return{url:a.url,headers:Array.from(a.headers),method:a.method,credentials:a.credentials,referrer:a.referrer,mode:'navigate'===a.mode?'same-origin':a.mode,body:b}}async function b(a){return new Request(a.url,a)}const c={"comment-sync":'requests',"ga-sync":'ga-requests'};class d{constructor(){this._dbPromise=idb.open('bgsyncs',2,(a)=>{switch(a.oldVersion){case 0:a.createObjectStore('requests',{keyPath:'id'});case 1:a.createObjectStore('ga-requests',{keyPath:'id'});}})}generateUID(){return`${Date.now()}-${performance.now()}`}get supportsBackgroundSync(){return'SyncManager'in self}async syncManager(){let a=self.registration;if(!a)try{a=await navigator.serviceWorker.getRegistration()}catch(a){}return a.sync}async trigger(a='comment-sync'){return(await this.syncManager()).register(a)}async isSyncing(a='comment-sync'){const b=await this.syncManager(),c=await b.getTags();return c.includes(a)}async enqueue(b,{dbName:c='requests'}={}){const d=await this._dbPromise,e=await a(b);await d.transaction(c,'readwrite').objectStore(c).put(Object.assign(e,{id:this.generateUID()})).complete}async getAll({dbName:a='requests'}={}){const c=await this._dbPromise,d=await c.transaction(a).objectStore(a).getAll();return Promise.all(d.map(async(a)=>({request:await b(a),id:a.id})))}async delete(a,{dbName:b='requests'}={}){const c=await this._dbPromise;await c.transaction(b,'readwrite').objectStore(b).delete(a).complete}async numPending({dbName:a='requests'}={}){const b=await this._dbPromise;return b.transaction(a).objectStore(a).count()}process(a){a.waitUntil((async()=>{if(!(a.tag in c))return;const b=c[a.tag],d=await this.getAll({dbName:b});await Promise.all(d.map(async(a)=>{try{await fetch(a.request),await _bgSyncManager.delete(a.id,{dbName:b})}catch(a){}}));const e=await _bgSyncManager.numPending({dbName:b});return'comment-sync'===a.tag&&_pubsubhub.dispatch('comment_update'),0<e?Promise.reject():void 0})())}}self._bgSyncManager=new d})();