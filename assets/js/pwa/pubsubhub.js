(function(){function a(){return'undefined'!=typeof window&&'undefined'!=typeof document}function b(){return'serviceWorker'in navigator}class c{constructor(){this._subscribers=new Set}subscribe(a){return this._subscribers.add(a),{unsubscribe:()=>this._subscribers.delete(a)}}dispatch(a){for(let b of this._subscribers)b(a)}}self._pubsubhub=new class{constructor(){this._observables=new Map;const c=this._handler.bind(this);a()&&(b()?navigator.serviceWorker.addEventListener('message',c):self.addEventListener('message',c))}async _postMessageOtherSide(...b){return a()?this._postMessageServiceWorker(...b):this._postMessageAllClients(...b)}async _postMessageServiceWorker(...a){if(b()){const b=await navigator.serviceWorker.getRegistration();return b&&b.active?b.active.postMessage(...a):void 0}}async _postMessageAllClients(...a){const b=await self.clients.matchAll(...a);for(const c of b)c.postMessage(...a)}async _handler(a){const b=a.data.topic;this._observables.has(b)&&this._observables.get(b).dispatch(a.data.data)}async dispatch(b,c={}){const d={data:c,realm:a()?'browser':'serviceworker',topic:b};await this._postMessageOtherSide(d),this._observables.has(b)&&this._observables.get(b).dispatch(c)}subscribe(a,b){let d;return this._observables.has(a)?d=this._observables.get(a):(d=new c,this._observables.set(a,d)),d.subscribe(b)}}})();